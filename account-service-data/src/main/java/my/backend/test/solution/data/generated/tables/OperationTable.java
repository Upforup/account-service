/*
 * This file is generated by jOOQ.
 */
package my.backend.test.solution.data.generated.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import my.backend.test.solution.data.generated.Indexes;
import my.backend.test.solution.data.generated.Keys;
import my.backend.test.solution.data.generated.Public;
import my.backend.test.solution.data.generated.tables.records.OperationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperationTable extends TableImpl<OperationRecord> {

    private static final long serialVersionUID = 775741800;

    /**
     * The reference instance of <code>PUBLIC.OPERATION</code>
     */
    public static final OperationTable OPERATION = new OperationTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OperationRecord> getRecordType() {
        return OperationRecord.class;
    }

    /**
     * The column <code>PUBLIC.OPERATION.ID</code>.
     */
    public final TableField<OperationRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.OPERATION.SRC_ACCOUNT_ID</code>.
     */
    public final TableField<OperationRecord, Long> SRC_ACCOUNT_ID = createField("SRC_ACCOUNT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.OPERATION.TGT_ACCOUNT_ID</code>.
     */
    public final TableField<OperationRecord, Long> TGT_ACCOUNT_ID = createField("TGT_ACCOUNT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.OPERATION.AMOUNT</code>.
     */
    public final TableField<OperationRecord, BigDecimal> AMOUNT = createField("AMOUNT", org.jooq.impl.SQLDataType.DECIMAL(20, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.OPERATION.CREATED</code>.
     */
    public final TableField<OperationRecord, Timestamp> CREATED = createField("CREATED", org.jooq.impl.SQLDataType.TIMESTAMP.precision(2), this, "");

    /**
     * Create a <code>PUBLIC.OPERATION</code> table reference
     */
    public OperationTable() {
        this(DSL.name("OPERATION"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.OPERATION</code> table reference
     */
    public OperationTable(String alias) {
        this(DSL.name(alias), OPERATION);
    }

    /**
     * Create an aliased <code>PUBLIC.OPERATION</code> table reference
     */
    public OperationTable(Name alias) {
        this(alias, OPERATION);
    }

    private OperationTable(Name alias, Table<OperationRecord> aliased) {
        this(alias, aliased, null);
    }

    private OperationTable(Name alias, Table<OperationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OperationTable(Table<O> child, ForeignKey<O, OperationRecord> key) {
        super(child, key, OPERATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_SRC_ACC_ID_INDEX_9, Indexes.FK_TGT_ACC_ID_INDEX_9, Indexes.IDX_OP_SRC_ACC, Indexes.PRIMARY_KEY_9);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OperationRecord> getPrimaryKey() {
        return Keys.PK_OPERATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OperationRecord>> getKeys() {
        return Arrays.<UniqueKey<OperationRecord>>asList(Keys.PK_OPERATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OperationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OperationRecord, ?>>asList(Keys.FK_SRC_ACC_ID, Keys.FK_TGT_ACC_ID);
    }

    public AccountTable fkSrcAccId() {
        return new AccountTable(this, Keys.FK_SRC_ACC_ID);
    }

    public AccountTable fkTgtAccId() {
        return new AccountTable(this, Keys.FK_TGT_ACC_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperationTable as(String alias) {
        return new OperationTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OperationTable as(Name alias) {
        return new OperationTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OperationTable rename(String name) {
        return new OperationTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OperationTable rename(Name name) {
        return new OperationTable(name, null);
    }
}
