/*
 * This file is generated by jOOQ.
 */
package my.backend.test.solution.data.generated.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import my.backend.test.solution.data.generated.Indexes;
import my.backend.test.solution.data.generated.Keys;
import my.backend.test.solution.data.generated.Public;
import my.backend.test.solution.data.generated.tables.records.AccountMovementRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountMovementTable extends TableImpl<AccountMovementRecord> {

    private static final long serialVersionUID = -324160472;

    /**
     * The reference instance of <code>PUBLIC.ACCOUNT_MOVEMENT</code>
     */
    public static final AccountMovementTable ACCOUNT_MOVEMENT = new AccountMovementTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountMovementRecord> getRecordType() {
        return AccountMovementRecord.class;
    }

    /**
     * The column <code>PUBLIC.ACCOUNT_MOVEMENT.ACCOUNT_ID</code>.
     */
    public final TableField<AccountMovementRecord, Long> ACCOUNT_ID = createField("ACCOUNT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_MOVEMENT.OPERATION_ID</code>.
     */
    public final TableField<AccountMovementRecord, Long> OPERATION_ID = createField("OPERATION_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_MOVEMENT.AMOUNT</code>.
     */
    public final TableField<AccountMovementRecord, BigDecimal> AMOUNT = createField("AMOUNT", org.jooq.impl.SQLDataType.DECIMAL(20, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_MOVEMENT.DIRECTION</code>.
     */
    public final TableField<AccountMovementRecord, Byte> DIRECTION = createField("DIRECTION", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_MOVEMENT.CREATED</code>.
     */
    public final TableField<AccountMovementRecord, Timestamp> CREATED = createField("CREATED", org.jooq.impl.SQLDataType.TIMESTAMP.precision(2), this, "");

    /**
     * Create a <code>PUBLIC.ACCOUNT_MOVEMENT</code> table reference
     */
    public AccountMovementTable() {
        this(DSL.name("ACCOUNT_MOVEMENT"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ACCOUNT_MOVEMENT</code> table reference
     */
    public AccountMovementTable(String alias) {
        this(DSL.name(alias), ACCOUNT_MOVEMENT);
    }

    /**
     * Create an aliased <code>PUBLIC.ACCOUNT_MOVEMENT</code> table reference
     */
    public AccountMovementTable(Name alias) {
        this(alias, ACCOUNT_MOVEMENT);
    }

    private AccountMovementTable(Name alias, Table<AccountMovementRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountMovementTable(Name alias, Table<AccountMovementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AccountMovementTable(Table<O> child, ForeignKey<O, AccountMovementRecord> key) {
        super(child, key, ACCOUNT_MOVEMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_MV_ACC_INDEX_C, Indexes.FK_MV_OP_INDEX_C, Indexes.IDX_MV_ACC, Indexes.IDX_MV_OP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AccountMovementRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountMovementRecord, ?>>asList(Keys.FK_MV_ACC, Keys.FK_MV_OP);
    }

    public AccountTable account() {
        return new AccountTable(this, Keys.FK_MV_ACC);
    }

    public OperationTable operation() {
        return new OperationTable(this, Keys.FK_MV_OP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountMovementTable as(String alias) {
        return new AccountMovementTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountMovementTable as(Name alias) {
        return new AccountMovementTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountMovementTable rename(String name) {
        return new AccountMovementTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountMovementTable rename(Name name) {
        return new AccountMovementTable(name, null);
    }
}
