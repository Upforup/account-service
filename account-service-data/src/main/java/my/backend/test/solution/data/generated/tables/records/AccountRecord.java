/*
 * This file is generated by jOOQ.
 */
package my.backend.test.solution.data.generated.tables.records;


import java.math.BigDecimal;
import java.sql.Date;

import javax.annotation.Generated;

import my.backend.test.solution.data.generated.tables.AccountTable;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record4<Long, String, BigDecimal, Date> {

    private static final long serialVersionUID = -376010299;

    /**
     * Setter for <code>PUBLIC.ACCOUNT.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.ACCOUNT_NUMBER</code>.
     */
    public void setAccountNumber(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.ACCOUNT_NUMBER</code>.
     */
    public String getAccountNumber() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.ACCOUNT_BALANCE</code>.
     */
    public void setAccountBalance(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.ACCOUNT_BALANCE</code>.
     */
    public BigDecimal getAccountBalance() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.DATE_OPEN</code>.
     */
    public void setDateOpen(Date value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.DATE_OPEN</code>.
     */
    public Date getDateOpen() {
        return (Date) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, String, BigDecimal, Date> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, String, BigDecimal, Date> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return AccountTable.ACCOUNT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return AccountTable.ACCOUNT.ACCOUNT_NUMBER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigDecimal> field3() {
        return AccountTable.ACCOUNT.ACCOUNT_BALANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Date> field4() {
        return AccountTable.ACCOUNT.DATE_OPEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getAccountNumber();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal component3() {
        return getAccountBalance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date component4() {
        return getDateOpen();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getAccountNumber();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal value3() {
        return getAccountBalance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date value4() {
        return getDateOpen();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value2(String value) {
        setAccountNumber(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value3(BigDecimal value) {
        setAccountBalance(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value4(Date value) {
        setDateOpen(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord values(Long value1, String value2, BigDecimal value3, Date value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(AccountTable.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(Long id, String accountNumber, BigDecimal accountBalance, Date dateOpen) {
        super(AccountTable.ACCOUNT);

        set(0, id);
        set(1, accountNumber);
        set(2, accountBalance);
        set(3, dateOpen);
    }
}
